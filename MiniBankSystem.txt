import java.io.*;
import java.util.*;

class Account {
    String accountNumber;
    String ownerName;
    double balance;
    ArrayList<String> transactions = new ArrayList<>();
    static final double MIN_BALANCE = 50.0;

    public Account(String accountNumber, String ownerName) {
        this.accountNumber = accountNumber;
        this.ownerName = ownerName;
        this.balance = MIN_BALANCE;
        transactions.add(java.time.LocalDateTime.now() + ": Account created with balance " + balance);
    }

    public boolean withdraw(double amount) {
        if (balance - amount >= MIN_BALANCE) {
            balance -= amount;
            transactions.add(java.time.LocalDateTime.now() + ": Withdrawn " + amount);
            return true;
        }

        else {
            return false;
        }
    }



    public void deposit(double amount) {
        balance += amount;
        transactions.add(java.time.LocalDateTime.now() + ": Deposited " + amount);
    }



    public void showBalance() {
        System.out.println("Account Owner: " + ownerName);
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Current Balance: " + balance);
    }



    public void showTransactions() {
        System.out.println("Transaction History");
        for (String t : transactions) {
            System.out.println(t);
        }
    }
}
class BankSystem {

    static final String BANK_NAME = "My Mini Bank";


    ArrayList<Account> accounts = new ArrayList<>();
    Scanner scanner = new Scanner(System.in);


    public void start() {
        loadAccounts();
        boolean running = true;

        while (running) {
            System.out.println("BANK_NAME");
            System.out.println("1. Create Account");
            System.out.println("3. Withdraw");
            System.out.println("2. Deposit");
            System.out.println("4. View Balance");
            System.out.println("5. View Transaction");
            System.out.println("6. Exit");
            System.out.print("Enter choice: ");
            String choice = scanner.nextLine();



            switch (choice) {
                case "1": createAccount(); break;
                case "2": withdraw(); break;
                case "3": deposit(); break;
                case "4": viewBalance(); break;
                case "5": viewTransactions(); break;
                case "6":
                    running = false;
                    saveAccounts();
                    System.out.println("Thank you for using " + BANK_NAME);
                    break;
                default: System.out.println("Invalid option"); break;
            }
        }
    }



    private void createAccount() {
        System.out.print("Enter account number: ");
        String accNo = scanner.nextLine();

        if (findAccount(accNo) != null) {
            System.out.println("Account number already exists");
            return;
        }


        System.out.print("Enter owner name: ");
        String name = scanner.nextLine();

        Account newAcc = new Account(accNo, name);
        accounts.add(newAcc);
        System.out.println("Account created successfully");
    }




    private void withdraw() {
        Account acc = getAccount();
        if (acc == null)
            return;

        System.out.print("Enter amount to withdraw: ");
        try {
            double amount = Double.parseDouble(scanner.nextLine());
            if (acc.withdraw(amount)) {
                System.out.println("Withdrawal successful");
            } else {
                System.out.println(" Minimum balance required: " + Account.MIN_BALANCE);
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid input");
        }
    }



    private void deposit() {
        Account acc = getAccount();
        if (acc == null) return;

        System.out.print("Enter amount to deposit: ");
        try {
            double amount = Double.parseDouble(scanner.nextLine());
            acc.deposit(amount);
            System.out.println("Deposit successful");
        } catch (NumberFormatException e) {
            System.out.println("Invalid input");
        }
    }





    private void viewBalance() {
        Account acc = getAccount();
        if (acc != null) {
            acc.showBalance();
        }
    }



    private void viewTransactions() {
        Account acc = getAccount();
        if (acc != null) {
            acc.showTransactions();
        }
    }




    private Account getAccount() {
        System.out.print("Enter account number:");
        String accNo = scanner.nextLine();
        Account acc = findAccount(accNo);
        if (acc == null) {
            System.out.println("Account not found");
        }
        return acc;
    }





    private Account findAccount(String accNo) {
        for (Account acc : accounts) {
            if (acc.accountNumber.equals(accNo)) {
                return acc;
            }
        }
        return null;
    }


    private void loadAccounts() {
        try (BufferedReader br = new BufferedReader(new FileReader("accounts.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 3) {
                    Account acc = new Account(parts[0], parts[1]);
                    accounts.add(acc);
                }
            }
        }
        catch (IOException e) {
            System.out.println("No saved data found");
        }
    }



    private void saveAccounts() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("accounts.txt"))) {
            for (Account acc : accounts) {
                bw.write(acc.accountNumber + "," + acc.ownerName + "," + acc.balance);
                bw.newLine();
            }
        }
        catch (IOException e) {
            System.out.println("Error saving data");
        }
    }
}


public class MiniBankSystem {

    public static void main(String[] args) {
        BankSystem bankSystem = new BankSystem();
        bankSystem.start();
    }
}